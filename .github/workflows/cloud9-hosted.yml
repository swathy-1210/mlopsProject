name: CI/CD Pipeline - Self-Hosted

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: self-hosted

    steps:
    - name: Checkout Repository Code
      uses: actions/checkout@v2

    - name: Verify Python 3.8 Installation
      run: |
        python3 --version || (echo "Python3 is not installed" && exit 1)

    - name: Install Docker If Needed
      id: docker-install
      run: |
        if ! command -v docker &> /dev/null; then
          echo "Docker not found. Installing..."
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt-get update
          sudo apt-get install -y docker-ce
          sudo systemctl start docker
          sudo systemctl enable docker
        else
          echo "Docker is already installed"
        fi

    - name: Add User to Docker Group
      run: |
        sudo usermod -aG docker $USER
        echo "User added to Docker group. Please restart the runner to apply changes."

    - name: Ensure Docker is Running
      run: |
        sudo systemctl start docker
        sudo systemctl status docker || true

    - name: Verify Docker Socket Permissions
      run: |
        sudo chown root:docker /var/run/docker.sock
        sudo chmod 660 /var/run/docker.sock

    - name: Set Up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install Python Dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip3 install black pylint pytest
        pip3 install -r requirements/requirements.txt

    - name: Run Model Training Pipeline
      run: python3 bikeshare_model/train_pipeline.py

    - name: Run Prediction Script
      run: python3 bikeshare_model/predict.py

    - name: Execute Unit Tests
      run: pytest tests/test_predictions.py

    - name: Perform Code Linting
      run: pylint bikeshare_model/*.py || exit 0
      continue-on-error: true

    - name: Format Code with Black
      run: black bikeshare_model/

    - name: Upgrade Build Package
      run: pip3 install --upgrade build

    - name: Build Python Package
      run: |
        python3 -m build
        ls -lrt

    - name: Copy Built Package to API Directory
      run: cp dist/bikeshare_model-0.0.1-py3-none-any.whl bikeshare_model_api/

    - name: Check for Running Containers
      run: sudo docker ps -a

    - name: Remove Old Docker Image
      run: |
        OLD_IMAGE_ID=$(sudo docker images -q bikeshare_model_api || true)
        if [ -n "$OLD_IMAGE_ID" ]; then
          TAGS=$(sudo docker images --format "{{.Repository}}:{{.Tag}}" | grep "$OLD_IMAGE_ID" || true)
          if [ -n "$TAGS" ]; then
            for TAG in $TAGS; do
              sudo docker rmi -f "$TAG" || true
            done
          fi
          sudo docker rmi -f "$OLD_IMAGE_ID" || true
        fi

    - name: Build New Docker Image
      run: |
        cd bikeshare_model_api
        sudo docker build -f Dockerfile-sj -t bikeshare_model_api .

    - name: Log In to DockerHub
      run: echo "${{ secrets.DOCKER_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Push Docker Image to DockerHub
      run: |
        sudo docker tag bikeshare_model_api ${{ secrets.DOCKER_USERNAME }}/bikeshare_model_api:latest
        sudo docker push ${{ secrets.DOCKER_USERNAME }}/bikeshare_model_api:latest

  deploy:
    runs-on: self-hosted
    needs: build

    steps:
    - name: Checkout Repository Code
      uses: actions/checkout@v2

    - name: Pull Docker Image from DockerHub
      run: |
        echo "${{ secrets.DOCKER_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        sudo docker pull ${{ secrets.DOCKER_USERNAME }}/bikeshare_model_api:latest

    - name: Stop and Remove Old Container
      run: |
        CONTAINER_ID=$(sudo docker ps -q --filter "name=bikeshare_model_api")
        if [ -n "$CONTAINER_ID" ]; then
          sudo docker stop "$CONTAINER_ID"
          sudo docker rm "$CONTAINER_ID"
        fi

    - name: Run New Container
      run: |
        sudo docker run -d --name bikeshare_model_api -p 80:80 ${{ secrets.DOCKER_USERNAME }}/bikeshare_model_api:latest
